// checksum 0xc01f version 0x90005
/*
  This file was generated by the Qt Quick 2 Application wizard of Qt Creator.
  QtQuick2ApplicationViewer is a convenience class containing mobile device specific
  code such as screen orientation handling. Also QML paths and debugging are
  handled here.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/

#include "qtquick2applicationviewer.h"

#include <QtCore/QCoreApplication>
#include <QtCore/QDir>
#include <QtQml/QQmlEngine>
#include <QDebug>
#include <QAction>
#include <QMenu>

class QtQuick2ApplicationViewerPrivate
{
    QString mainQmlFile;
    friend class QtQuick2ApplicationViewer;
    static QString adjustPath(const QString &path);
};

QString QtQuick2ApplicationViewerPrivate::adjustPath(const QString &path)
{
#if defined(Q_OS_IOS)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("%1/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_MAC)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("%1/../Resources/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_BLACKBERRY)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("app/native/%1").arg(path);
#elif !defined(Q_OS_ANDROID)
    QString pathInInstallDir =
            QString::fromLatin1("%1/../%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
    pathInInstallDir =
            QString::fromLatin1("%1/%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
#elif defined(Q_OS_ANDROID_NO_SDK)
    return QLatin1String("/data/user/qt/") + path;
#endif
    return path;
}

QtQuick2ApplicationViewer::QtQuick2ApplicationViewer(QWindow *parent)
    : QQuickView(parent)
    , d(new QtQuick2ApplicationViewerPrivate())
{
    createSystemTray();
    connect(engine(), SIGNAL(quit()), SLOT(close()));
    setResizeMode(QQuickView::SizeRootObjectToView);
}

QtQuick2ApplicationViewer::~QtQuick2ApplicationViewer()
{
    delete d;
}

void QtQuick2ApplicationViewer::setMainQmlFile(const QString &file)
{
    d->mainQmlFile = QtQuick2ApplicationViewerPrivate::adjustPath(file);
#if defined(Q_OS_ANDROID) && !defined(Q_OS_ANDROID_NO_SDK)
    setSource(QUrl(QLatin1String("assets:/")+d->mainQmlFile));
#else
    setSource(QUrl::fromLocalFile(d->mainQmlFile));
#endif
}

void QtQuick2ApplicationViewer::addImportPath(const QString &path)
{
    engine()->addImportPath(QtQuick2ApplicationViewerPrivate::adjustPath(path));
}

void QtQuick2ApplicationViewer::showExpanded()
{
#if defined(Q_WS_SIMULATOR) || defined(Q_OS_QNX)
    showFullScreen();
#else
    show();
#endif
}

bool QtQuick2ApplicationViewer::event(QEvent *event)
{
    if (event->type() == QEvent::Close) {
        qDebug() << "Attempt close";
        onExit();
//        hide();
    }
    return QQuickView::event(event);
}

void QtQuick2ApplicationViewer::iconActivated(QSystemTrayIcon::ActivationReason reason)
{
    if (reason && reason != QSystemTrayIcon::DoubleClick)
        return;
    onShowHide();
}

void QtQuick2ApplicationViewer::onShowHide()
{
    if (isVisible()) {
        hide();
    } else {
        showExpanded();
        raise();
    }

}

void QtQuick2ApplicationViewer::onExit()
{
    m_trayIcon->hide();
    qApp->quit();
}

void QtQuick2ApplicationViewer::createSystemTray()
{
    m_trayIcon = new QSystemTrayIcon(QIcon("qrc:/icon.png"), this);

    connect(m_trayIcon, &QSystemTrayIcon::activated, this, &QtQuick2ApplicationViewer::iconActivated);

//    QAction *quitAction = new QAction( "Exit", m_trayIcon);
//    connect( quitAction, &QAction::triggered, this, &QtQuick2ApplicationViewer::onExit);

//    QAction *hideAction = new QAction( "Show/Hide", m_trayIcon );
//    connect( hideAction, &QAction::triggered, this, &QtQuick2ApplicationViewer::onShowHide);

//    QMenu *trayIconMenu = new QMenu(parent());
//    trayIconMenu->addAction(hideAction);
//    trayIconMenu->addAction(quitAction);

//    m_trayIcon->setContextMenu(trayIconMenu);
    m_trayIcon->show();
}
